version: "3"

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    volumes:
      - .ignore/zookeeper:/bitnami/zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    volumes:
      - .ignore/kafka:/bitnami/kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "PLAINTEXT://kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - zookeeper
      - kafka

  consumer:
    build:
      context: .
      dockerfile: services/consumer/Dockerfile
    volumes:
      - "./:/code/"
    container_name: consumer
    entrypoint: [ "python3", "/code/services/consumer/main.py" ]
    depends_on:
      - zookeeper
      - kafka
      - kafdrop

  publisher:
    build:
      context: .
      dockerfile: services/publisher/Dockerfile
    volumes:
      - "./:/code/"
    container_name: publisher
    entrypoint: [ "python3", "/code/services/publisher/main.py" ]
    depends_on:
      - zookeeper
      - kafka
      - kafdrop